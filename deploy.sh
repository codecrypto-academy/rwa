#!/bin/bash

# ERC-3643 RWA Token Platform - Deployment Script
# This script deploys all contracts and updates the web app configuration

set -e  # Exit on error

echo "ðŸš€ Starting ERC-3643 Token Platform Deployment"
echo "=============================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're in the project root
if [ ! -d "sc" ] || [ ! -d "web" ]; then
    echo -e "${RED}Error: Please run this script from the project root directory${NC}"
    exit 1
fi

# Check if Anvil is running
echo -e "\n${YELLOW}Checking if Anvil is running...${NC}"
if ! curl -s -X POST -H "Content-Type: application/json" \
    --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
    http://localhost:8545 > /dev/null 2>&1; then
    echo -e "${RED}Error: Anvil is not running${NC}"
    echo "Please start Anvil in a separate terminal with: anvil"
    exit 1
fi
echo -e "${GREEN}âœ“ Anvil is running${NC}"

# Get the first private key from Anvil (default test account)
export PRIVATE_KEY="0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
DEPLOYER_ADDRESS="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"

echo -e "\n${YELLOW}Deployer Address:${NC} $DEPLOYER_ADDRESS"

# Clean previous build artifacts
echo -e "\n${YELLOW}Cleaning previous build artifacts...${NC}"
cd sc
forge clean
echo -e "${GREEN}âœ“ Cleaned${NC}"

# Build contracts
echo -e "\n${YELLOW}Building contracts...${NC}"
forge build
echo -e "${GREEN}âœ“ Build successful${NC}"

# Deploy contracts
echo -e "\n${YELLOW}Deploying contracts to local network...${NC}"
DEPLOY_OUTPUT=$(forge script script/Deploy.s.sol \
    --rpc-url http://localhost:8545 \
    --private-key $PRIVATE_KEY \
    --broadcast \
    -vv 2>&1)

echo "$DEPLOY_OUTPUT"

# Extract contract addresses from deployment output
echo -e "\n${YELLOW}Extracting contract addresses...${NC}"

TOKEN_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "Token deployed at:" | awk '{print $NF}')
IDENTITY_REGISTRY=$(echo "$DEPLOY_OUTPUT" | grep "IdentityRegistry deployed at:" | awk '{print $NF}')
TRUSTED_ISSUERS_REGISTRY=$(echo "$DEPLOY_OUTPUT" | grep "TrustedIssuersRegistry deployed at:" | awk '{print $NF}')
CLAIM_TOPICS_REGISTRY=$(echo "$DEPLOY_OUTPUT" | grep "ClaimTopicsRegistry deployed at:" | awk '{print $NF}')
MAX_BALANCE_COMPLIANCE=$(echo "$DEPLOY_OUTPUT" | grep "MaxBalanceCompliance deployed at:" | awk '{print $NF}')
MAX_HOLDERS_COMPLIANCE=$(echo "$DEPLOY_OUTPUT" | grep "MaxHoldersCompliance deployed at:" | awk '{print $NF}')
TRANSFER_LOCK_COMPLIANCE=$(echo "$DEPLOY_OUTPUT" | grep "TransferLockCompliance deployed at:" | awk '{print $NF}')

# Validate addresses
if [ -z "$TOKEN_ADDRESS" ]; then
    echo -e "${RED}Error: Failed to extract contract addresses${NC}"
    echo "Please check the deployment output above"
    exit 1
fi

echo -e "${GREEN}âœ“ Contract addresses extracted${NC}"

# Create .env.local file for web app
echo -e "\n${YELLOW}Creating .env.local file for web app...${NC}"

cd ../web

cat > .env.local << EOF
# Contract Addresses - Auto-generated by deploy.sh
# Network: Localhost (Anvil)
# Deployed: $(date)

NEXT_PUBLIC_TOKEN_ADDRESS=$TOKEN_ADDRESS
NEXT_PUBLIC_IDENTITY_REGISTRY_ADDRESS=$IDENTITY_REGISTRY
NEXT_PUBLIC_TRUSTED_ISSUERS_REGISTRY_ADDRESS=$TRUSTED_ISSUERS_REGISTRY
NEXT_PUBLIC_CLAIM_TOPICS_REGISTRY_ADDRESS=$CLAIM_TOPICS_REGISTRY
NEXT_PUBLIC_MAX_BALANCE_COMPLIANCE_ADDRESS=$MAX_BALANCE_COMPLIANCE
NEXT_PUBLIC_MAX_HOLDERS_COMPLIANCE_ADDRESS=$MAX_HOLDERS_COMPLIANCE
NEXT_PUBLIC_TRANSFER_LOCK_COMPLIANCE_ADDRESS=$TRANSFER_LOCK_COMPLIANCE

# Default Configuration
NEXT_PUBLIC_CHAIN_ID=31337
NEXT_PUBLIC_RPC_URL=http://localhost:8545

# Test Accounts (from Anvil)
NEXT_PUBLIC_DEPLOYER_ADDRESS=$DEPLOYER_ADDRESS
EOF

echo -e "${GREEN}âœ“ .env.local created${NC}"

# Create a TypeScript constants file
echo -e "\n${YELLOW}Creating contract constants file...${NC}"

mkdir -p src/config

cat > src/config/contracts.ts << EOF
// Contract Addresses - Auto-generated by deploy.sh
// Network: Localhost (Anvil)
// Deployed: $(date)

export const CONTRACTS = {
  Token: '$TOKEN_ADDRESS' as \`0x\${string}\`,
  IdentityRegistry: '$IDENTITY_REGISTRY' as \`0x\${string}\`,
  TrustedIssuersRegistry: '$TRUSTED_ISSUERS_REGISTRY' as \`0x\${string}\`,
  ClaimTopicsRegistry: '$CLAIM_TOPICS_REGISTRY' as \`0x\${string}\`,
  MaxBalanceCompliance: '$MAX_BALANCE_COMPLIANCE' as \`0x\${string}\`,
  MaxHoldersCompliance: '$MAX_HOLDERS_COMPLIANCE' as \`0x\${string}\`,
  TransferLockCompliance: '$TRANSFER_LOCK_COMPLIANCE' as \`0x\${string}\`,
} as const

export const CHAIN_CONFIG = {
  chainId: 31337,
  rpcUrl: 'http://localhost:8545',
  name: 'Localhost',
} as const

// Test accounts from Anvil
export const TEST_ACCOUNTS = {
  deployer: '$DEPLOYER_ADDRESS' as \`0x\${string}\`,
} as const
EOF

echo -e "${GREEN}âœ“ contracts.ts created${NC}"

# Summary
echo -e "\n${GREEN}=============================================="
echo "ðŸŽ‰ Deployment Complete!"
echo "==============================================${NC}"
echo -e "\n${YELLOW}Contract Addresses:${NC}"
echo "  Token:                    $TOKEN_ADDRESS"
echo "  Identity Registry:        $IDENTITY_REGISTRY"
echo "  Trusted Issuers Registry: $TRUSTED_ISSUERS_REGISTRY"
echo "  Claim Topics Registry:    $CLAIM_TOPICS_REGISTRY"
echo "  Max Balance Compliance:   $MAX_BALANCE_COMPLIANCE"
echo "  Max Holders Compliance:   $MAX_HOLDERS_COMPLIANCE"
echo "  Transfer Lock Compliance: $TRANSFER_LOCK_COMPLIANCE"

echo -e "\n${YELLOW}Configuration Files Created:${NC}"
echo "  web/.env.local"
echo "  web/src/config/contracts.ts"

echo -e "\n${YELLOW}Next Steps:${NC}"
echo "  1. Starting the web app on port 7001..."
echo "  2. Open http://localhost:7001 in your browser"
echo "  3. Connect with MetaMask using one of the Anvil test accounts"
echo ""

# Start the web app
echo -e "\n${YELLOW}Starting web application on port 7001...${NC}"

# Kill any process running on port 7001
echo -e "${YELLOW}Checking for existing processes on port 7001...${NC}"
PORT_PID=$(lsof -ti:7001)
if [ ! -z "$PORT_PID" ]; then
    echo -e "${YELLOW}Found process $PORT_PID running on port 7001. Killing it...${NC}"
    kill -9 $PORT_PID 2>/dev/null || true
    sleep 1
    echo -e "${GREEN}âœ“ Port 7001 is now free${NC}"
else
    echo -e "${GREEN}âœ“ Port 7001 is available${NC}"
fi

# Check if node_modules exists
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}Installing dependencies...${NC}"
    npm install
    echo -e "${GREEN}âœ“ Dependencies installed${NC}"
fi

# Start the development server on port 7001
echo -e "${GREEN}ðŸš€ Starting Next.js dev server on http://localhost:7001${NC}"
echo -e "${GREEN}Press Ctrl+C to stop the server${NC}\n"
PORT=7001 npm run dev
